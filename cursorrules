# .windsurfrules
# Professional Engineering Standards for irida-next

## Core Principles

- Write clear, readable, idiomatic code using:
  - Ruby on Rails v8.0.1 (Ruby v3.3.7)
  - Hotwire (Turbo Rails), Stimulus.js (latest)
  - TailwindCSS v4.0, Flowbite v3.1.2, ViewComponent v3.21.0, Heroicon Rails v0.2.9
  - PostgreSQL, Active Storage, Logidze, Paranoia, FX, ActionCable Enhanced PostgreSQL Adapter
  - GraphQL, GraphiQL, Faraday v2.5, Jbuilder
  - Devise v4.9.4, OmniAuth (Entra ID, SAML), Action Policy
  - Ransack, SearchSyntax, Pagy
  - XLSX, SortableJS, Lodash, Local Time
  - Sprockets, Importmap Rails

- Always:
  - Follow requirements to the letter and confirm before coding.
  - Write well-structured, fully commented code with clear intent (üí°, üìù, üöÄ, etc. encouraged).
  - Suggest alternative/contrarian solutions when appropriate.
  - Anticipate future needs and edge cases.
  - Treat all contributors as experts; avoid unnecessary explanations.
  - Prioritize code readability and maintainability over micro-optimization.
  - Implement all requested functionality completely‚Äîno TODOs, placeholders, or missing pieces.
  - Be concise in prose, verbose in code clarity.
  - Use modern idioms and features; avoid deprecated patterns.
  - Highlight, explain, and fix all linting errors.
  - If uncertain, say so‚Äînever guess.

---

## Accessibility

- Pass all Axe Core accessibility checks.
- Use semantic HTML5 elements and ARIA roles where appropriate.
- Ensure keyboard navigation is complete and logical.
- Maintain color contrast ratios (WCAG AA minimum).
- Use descriptive alt text and labels for all interactive elements.
- Test with screen readers for critical flows.

---

## Security

- Follow Rails security best practices (XSS, CSRF, mass assignment protection).
- Never commit secrets or credentials.
- Use strong parameter whitelisting and input validation.
- Sanitize all user input and output.
- Keep dependencies up to date and monitor for vulnerabilities.

---

## Testing

- All code must be covered by automated tests:
  - Unit, integration, and system tests (prefer RSpec or Rails default).
  - Accessibility tests (Axe, CI integration).
  - End-to-end tests for critical flows.
- Use factories, not fixtures.
- Test both happy and edge cases.

---

## Linting & Formatting

- Ruby: RuboCop (with Rails & GraphQL plugins), zero offenses.
- JavaScript: Prettier (with Prettier Plugin TailwindCSS), zero warnings.
- CSS: TailwindCSS class order and conventions.
- Accessibility: Axe Core, zero critical issues.
- All code must be auto-formatted before commit.

---

## Documentation

- All public methods, components, and modules must have doc comments.
- Keep README and all docs up to date, with code samples and usage examples.
- Document all endpoints, GraphQL types, and mutations.
- Update documentation with every significant code change.

---

## Internationalization

- All user-facing strings must use translation keys.
- Keep `en.yml`, `fr.yml`, and `devise.yml` in sync.
- Never hardcode text in views, JS, or Ruby code.

---

## Git & Workflow

- Use Conventional Commits:
  - Format: `<type>[optional scope]: <description>`
  - Types: feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert
  - Use `!` for breaking changes
- Branch naming: `type/short-description` (e.g., `feat/user-profile`)
- Pull Requests:
  - Require code review and CI passing before merge.
  - PR titles must match Conventional Commits.
  - Link related issues and provide a clear summary.
- Rebase and squash as appropriate; avoid merge commits in main.

---

## Dependency Management

- Use Bundler for Ruby and Importmap for JS.
- Keep dependencies minimal and up to date.
- Remove unused dependencies promptly.

---

## TailwindCSS & UI

- Use TailwindCSS v4.0 utility classes; never use inline styles.
- Never use `gray`‚Äîuse `slate` instead.
- Use Flowbite components for complex UI (modals, dropdowns, etc.).
- Use Heroicon Rails for all icons (unless otherwise specified).
- Always prefer ViewComponent for reusable UI.
- Follow responsive and dark mode best practices.
- Use relative positioning for icons/carets in inputs.
- Use pointer-events-none for non-interactive decorative elements.

---

## Prompt Generation Rules

- Analyze component requirements thoroughly.
- Suggest specific Flowbite components where relevant.
- Specify TailwindCSS classes for all UI elements.
- Always provide code that is accessible, secure, and idiomatic.

---

## Miscellaneous

- All code must be production-ready and immediately runnable.
- Never leave commented-out code in main branches.
- All migrations and schema changes must be reversible.
- Use localStorage only for client-side state that is not security-sensitive.
- Use rem-to-pixel conversion for responsive JS logic.

---

**Non-compliance with these rules is grounds for code review rejection.**

---

# End of .windsurfrules
